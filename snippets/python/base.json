{"#!\/usr\/bin\/env python":{"prefix":"env","description":"Adds shebang line for default python interpreter.","body":"#!\/usr\/bin\/env python\n$0"},"__magic__":{"prefix":"__","description":"Code snippet to create magic methods.","body":"__${1:init}__$0"},"#!\/usr\/bin\/env python3":{"prefix":"env3","description":"Adds shebang line for default python 3 interpreter.","body":"#!\/usr\/bin\/env python3\n$0"},"New method":{"prefix":"defs","description":"Code snippet for a class method definition.","body":"def ${1:mname}(self, ${2:arg}):\n\t${3:pass}$0"},"# -*- coding=utf-8 -*-":{"prefix":"enc","description":"set default python2.x encoding specification to utf-8 as it is mentioned in pep-0263.","body":"# -*- coding=utf-8 -*-\n$0"},"if __name__ == \"__main__\"":{"prefix":"ifmain","description":"Create implicitly all the code at the top level using the __name__ special variable.","body":"if __name__ == \"__main__\":\n\t${1:main()}$0"},"# coding=utf-8":{"prefix":"enco","description":"Set default python3 encoding specification to utf-8, by default this is the encoding for python3.x as it is mentioned in pep-3120.","body":"# coding=utf-8\n$0"},"New method w\/ return":{"prefix":"defst","description":"Code snippet for a class method definition.","body":"def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0"},"New function":{"prefix":"def","description":"Code snippet for function definition.","body":"def ${1:fname}(${2:arg}):\n\t${3:pass}$0"},"New function w\/ return":{"prefix":"deft","description":"Code snippet for function definition.","body":"def ${1:fname}(${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0"},"New async function":{"prefix":"adef","description":"Code snippet for async function definition.","body":"async def ${1:fname}(${2:arg}):\n\t${3:pass}$0"},"self":{"prefix":".","description":"Shortend snippet to reference the self property in an object.","body":"self.$0"},"from future import ...":{"prefix":"fenc","description":"Import future statement definitions for python2.x scripts using utf-8 as encoding.","body":["# -*- coding: utf-8 -*-","from __future__ import absolute_import, division, print_function, unicode_literals"]},"for":{"prefix":"for","description":"Code snippet to create a for loop structure.","body":"for ${1:value} in ${2:iterable}:\n\t${3:pass}$0"},"elif":{"prefix":"elif","description":"Code snippet for an elif","body":["elif ${1:expression}:","\t${2:pass}"]},"docs":{"prefix":"docs","body":["\"\"\"","Author: Nrupatunga","Email: nrupatunga.s@lightmetrics.co","Github: https:\/\/github.com\/nrupatunga","\"\"\"$0"],"filetype":"python"},"else":{"prefix":"else","description":"Code snippet for an else","body":["else:","\t${1:pass}"]},"try:except:else:finally":{"prefix":"tryef","description":"Code Snippet for a try\/except\/finally with else statement.","body":"try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}$0"},"while\/else":{"prefix":"while\/else","description":"Code snippet for a while loop with else","body":["while ${1:expression}:","\t${2:pass}","else:","\t${3:pass}"]},"from future import ... v1":{"prefix":"fenco","description":"Import future statement definitions for python3.x scripts using utf-8 as encoding.","body":["# coding: utf-8","from __future__ import absolute_import, division, print_function, unicode_literals"]},"for\/else":{"prefix":"for\/else","description":"Code snippet for a for loop with else","body":["for ${1:target_list} in ${2:expression_list}:","\t${3:pass}","else:","\t${4:pass}"]},"while":{"prefix":"while","description":"Code snippet to create a while loop structure.","body":"while ${1:condition}:\n\t${2:pass}$0"},"with":{"prefix":"with","description":"Code snippet for a with statement","body":["with ${1:expression} as ${2:target}:","\t${3:pass}"]},"try:except:else":{"prefix":"trye","description":"Code Snippet for a try\/except with else statement.","body":"try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}$0"},"from ... import ...":{"prefix":"fim","description":"Import statement that allows individual objects from the module to be imported directly into the callerâ€™s symbol table.","body":"from ${1:package\/module} import ${2:names}$0"},"try:except:":{"prefix":"try","description":"Code Snippet for a try and except blocks.","body":"try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}$0"},"if":{"prefix":"if","description":"Code snippet for the if statement.","body":"if ${1:condition}:\n\t${2:pass}$0"},"try:except:finally":{"prefix":"tryf","description":"Code Snippet for a try\/except\/finally.","body":"try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}$0"},"if\/else":{"prefix":"if\/else","description":"Code snippet for an if statement with else","body":["if ${1:condition}:","\t${2:pass}","else:","\t${3:pass}"]},"class":{"prefix":"class","description":"Code snippet for a class definition","body":["class ${1:classname}(${2:object}):","\t${3:pass}"]},"New property":{"prefix":"property","description":"New property: get and set via decorator","body":"@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value"},"New class":{"prefix":"classi","description":"Code snippet for a class definition.","body":"class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1.}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0"},"import":{"prefix":"im","description":"Import a package or module","body":"import ${1:package\/module}$0"}}